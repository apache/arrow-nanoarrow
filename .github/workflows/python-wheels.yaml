# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Build Python Wheels

# Build wheels weekly, on commit to main, or when requested
on:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/python-wheels.yaml'
      - 'python/setup.py'
      - 'python/pyproject.toml'
      - 'python/bootstrap.py'
      - 'python/MANIFEST.in'
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '6 0 * * 0'

jobs:
  build_sdist:
    runs-on: "ubuntu-20.04"
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
    - name: Check that cmake is installed
      run: |
        cmake --version

    - name: Install packaging tools
      run: |
        pip install build twine

    - name: Build sdist
      run: |
        cd python
        python -m build --sdist

    - name: Check install from sdist
      run: |
        pip install python/dist/nanoarrow-*.tar.gz

    - name: Test import
      run: |
        python -c "import nanoarrow; print(nanoarrow.__version__)"

    - name: Run twine check
      run: |
        twine check --strict python/dist/*

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: ./python/dist/nanoarrow-*.tar.gz

  build_wheels:
    needs: ["build_sdist"]
    name: Build wheels on ${{ matrix.config.label }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {os: "ubuntu-20.04", label: "linux"}
          - {os: "windows-2019", label: "windows"}
          - {os: "macOS-11", label: "macOS"}
          - {os: ["self-hosted", "arm"], label: "linux-arm64"}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        if: matrix.config.label != 'linux-arm64'
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.15.0

      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse python
        env:
          CIBW_ARCHS_MACOS: x86_64 arm64
          # Optional (test suite will pass if these are not available)
          # Commenting this for now because not all the tests pass yet (fixes in another PR)
          # CIBW_BEFORE_TEST: pip install --only-binary ":all:" pyarrow numpy || pip install --only-binary ":all:" numpy || true
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {package}/tests

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.config.label }}
          path: ./wheelhouse/*.whl

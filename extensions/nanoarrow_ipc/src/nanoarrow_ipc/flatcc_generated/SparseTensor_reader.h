#ifndef SPARSETENSOR_READER_H
#define SPARSETENSOR_READER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef TENSOR_READER_H
#include "Tensor_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif


typedef const struct org_apache_arrow_flatbuf_SparseTensorIndexCOO_table *org_apache_arrow_flatbuf_SparseTensorIndexCOO_table_t;
typedef struct org_apache_arrow_flatbuf_SparseTensorIndexCOO_table *org_apache_arrow_flatbuf_SparseTensorIndexCOO_mutable_table_t;
typedef const flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensorIndexCOO_vec_t;
typedef flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensorIndexCOO_mutable_vec_t;
typedef const struct org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table *org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table_t;
typedef struct org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table *org_apache_arrow_flatbuf_SparseMatrixIndexCSX_mutable_table_t;
typedef const flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseMatrixIndexCSX_vec_t;
typedef flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseMatrixIndexCSX_mutable_vec_t;
typedef const struct org_apache_arrow_flatbuf_SparseTensorIndexCSF_table *org_apache_arrow_flatbuf_SparseTensorIndexCSF_table_t;
typedef struct org_apache_arrow_flatbuf_SparseTensorIndexCSF_table *org_apache_arrow_flatbuf_SparseTensorIndexCSF_mutable_table_t;
typedef const flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensorIndexCSF_vec_t;
typedef flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensorIndexCSF_mutable_vec_t;
typedef const struct org_apache_arrow_flatbuf_SparseTensor_table *org_apache_arrow_flatbuf_SparseTensor_table_t;
typedef struct org_apache_arrow_flatbuf_SparseTensor_table *org_apache_arrow_flatbuf_SparseTensor_mutable_table_t;
typedef const flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensor_vec_t;
typedef flatbuffers_uoffset_t *org_apache_arrow_flatbuf_SparseTensor_mutable_vec_t;
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCOO_file_identifier
#define org_apache_arrow_flatbuf_SparseTensorIndexCOO_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_SparseTensorIndexCOO_file_identifier */
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCOO_identifier
#define org_apache_arrow_flatbuf_SparseTensorIndexCOO_identifier 0
#endif
#define org_apache_arrow_flatbuf_SparseTensorIndexCOO_type_hash ((flatbuffers_thash_t)0x3b31385a)
#define org_apache_arrow_flatbuf_SparseTensorIndexCOO_type_identifier "\x5a\x38\x31\x3b"
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCOO_file_extension
#define org_apache_arrow_flatbuf_SparseTensorIndexCOO_file_extension "bin"
#endif
#ifndef org_apache_arrow_flatbuf_SparseMatrixIndexCSX_file_identifier
#define org_apache_arrow_flatbuf_SparseMatrixIndexCSX_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_SparseMatrixIndexCSX_file_identifier */
#ifndef org_apache_arrow_flatbuf_SparseMatrixIndexCSX_identifier
#define org_apache_arrow_flatbuf_SparseMatrixIndexCSX_identifier 0
#endif
#define org_apache_arrow_flatbuf_SparseMatrixIndexCSX_type_hash ((flatbuffers_thash_t)0xec57ea87)
#define org_apache_arrow_flatbuf_SparseMatrixIndexCSX_type_identifier "\x87\xea\x57\xec"
#ifndef org_apache_arrow_flatbuf_SparseMatrixIndexCSX_file_extension
#define org_apache_arrow_flatbuf_SparseMatrixIndexCSX_file_extension "bin"
#endif
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCSF_file_identifier
#define org_apache_arrow_flatbuf_SparseTensorIndexCSF_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_SparseTensorIndexCSF_file_identifier */
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCSF_identifier
#define org_apache_arrow_flatbuf_SparseTensorIndexCSF_identifier 0
#endif
#define org_apache_arrow_flatbuf_SparseTensorIndexCSF_type_hash ((flatbuffers_thash_t)0xf44edda9)
#define org_apache_arrow_flatbuf_SparseTensorIndexCSF_type_identifier "\xa9\xdd\x4e\xf4"
#ifndef org_apache_arrow_flatbuf_SparseTensorIndexCSF_file_extension
#define org_apache_arrow_flatbuf_SparseTensorIndexCSF_file_extension "bin"
#endif
#ifndef org_apache_arrow_flatbuf_SparseTensor_file_identifier
#define org_apache_arrow_flatbuf_SparseTensor_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_SparseTensor_file_identifier */
#ifndef org_apache_arrow_flatbuf_SparseTensor_identifier
#define org_apache_arrow_flatbuf_SparseTensor_identifier 0
#endif
#define org_apache_arrow_flatbuf_SparseTensor_type_hash ((flatbuffers_thash_t)0xae6f7239)
#define org_apache_arrow_flatbuf_SparseTensor_type_identifier "\x39\x72\x6f\xae"
#ifndef org_apache_arrow_flatbuf_SparseTensor_file_extension
#define org_apache_arrow_flatbuf_SparseTensor_file_extension "bin"
#endif

typedef int16_t org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t;
__flatbuffers_define_integer_type(org_apache_arrow_flatbuf_SparseMatrixCompressedAxis, org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t, 16)
#define org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Row ((org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t)INT16_C(0))
#define org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Column ((org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t)INT16_C(1))

static inline const char *org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_name(org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t value)
{
    switch (value) {
    case org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Row: return "Row";
    case org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Column: return "Column";
    default: return "";
    }
}

static inline int org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_is_known_value(org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t value)
{
    switch (value) {
    case org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Row: return 1;
    case org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_Column: return 1;
    default: return 0;
    }
}



/**  ----------------------------------------------------------------------
 *  EXPERIMENTAL: Data structures for sparse tensors
 *  Coordinate (COO) format of sparse tensor index.
 * 
 *  COO's index list are represented as a NxM matrix,
 *  where N is the number of non-zero values,
 *  and M is the number of dimensions of a sparse tensor.
 * 
 *  indicesBuffer stores the location and size of the data of this indices
 *  matrix.  The value type and the stride of the indices matrix is
 *  specified in indicesType and indicesStrides fields.
 * 
 *  For example, let X be a 2x3x4x5 tensor, and it has the following
 *  6 non-zero values:
 *  ```text
 *    X[0, 1, 2, 0] := 1
 *    X[1, 1, 2, 3] := 2
 *    X[0, 2, 1, 0] := 3
 *    X[0, 1, 3, 0] := 4
 *    X[0, 1, 2, 1] := 5
 *    X[1, 2, 0, 4] := 6
 *  ```
 *  In COO format, the index matrix of X is the following 4x6 matrix:
 *  ```text
 *    [[0, 0, 0, 0, 1, 1],
 *     [1, 1, 1, 2, 1, 2],
 *     [2, 2, 3, 1, 2, 0],
 *     [0, 1, 0, 0, 3, 4]]
 *  ```
 *  When isCanonical is true, the indices is sorted in lexicographical order
 *  (row-major order), and it does not have duplicated entries.  Otherwise,
 *  the indices may not be sorted, or may have duplicated entries. */
struct org_apache_arrow_flatbuf_SparseTensorIndexCOO_table { uint8_t unused__; };

static inline size_t org_apache_arrow_flatbuf_SparseTensorIndexCOO_vec_len(org_apache_arrow_flatbuf_SparseTensorIndexCOO_vec_t vec)
__flatbuffers_vec_len(vec)
static inline org_apache_arrow_flatbuf_SparseTensorIndexCOO_table_t org_apache_arrow_flatbuf_SparseTensorIndexCOO_vec_at(org_apache_arrow_flatbuf_SparseTensorIndexCOO_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(org_apache_arrow_flatbuf_SparseTensorIndexCOO_table_t, vec, i, 0)
__flatbuffers_table_as_root(org_apache_arrow_flatbuf_SparseTensorIndexCOO)

/**  The type of values in indicesBuffer */
__flatbuffers_define_table_field(0, org_apache_arrow_flatbuf_SparseTensorIndexCOO, indicesType, org_apache_arrow_flatbuf_Int_table_t, 1)
/**  Non-negative byte offsets to advance one value cell along each dimension
 *  If omitted, default to row-major order (C-like). */
__flatbuffers_define_vector_field(1, org_apache_arrow_flatbuf_SparseTensorIndexCOO, indicesStrides, flatbuffers_int64_vec_t, 0)
/**  The location and size of the indices matrix's data */
__flatbuffers_define_struct_field(2, org_apache_arrow_flatbuf_SparseTensorIndexCOO, indicesBuffer, org_apache_arrow_flatbuf_Buffer_struct_t, 1)
/**  This flag is true if and only if the indices matrix is sorted in
 *  row-major order, and does not have duplicated entries.
 *  This sort order is the same as of Tensorflow's SparseTensor,
 *  but it is inverse order of SciPy's canonical coo_matrix
 *  (SciPy employs column-major order for its coo_matrix). */
__flatbuffers_define_scalar_field(3, org_apache_arrow_flatbuf_SparseTensorIndexCOO, isCanonical, flatbuffers_bool, flatbuffers_bool_t, UINT8_C(0))

/**  Compressed Sparse format, that is matrix-specific. */
struct org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table { uint8_t unused__; };

static inline size_t org_apache_arrow_flatbuf_SparseMatrixIndexCSX_vec_len(org_apache_arrow_flatbuf_SparseMatrixIndexCSX_vec_t vec)
__flatbuffers_vec_len(vec)
static inline org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table_t org_apache_arrow_flatbuf_SparseMatrixIndexCSX_vec_at(org_apache_arrow_flatbuf_SparseMatrixIndexCSX_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(org_apache_arrow_flatbuf_SparseMatrixIndexCSX_table_t, vec, i, 0)
__flatbuffers_table_as_root(org_apache_arrow_flatbuf_SparseMatrixIndexCSX)

/**  Which axis, row or column, is compressed */
__flatbuffers_define_scalar_field(0, org_apache_arrow_flatbuf_SparseMatrixIndexCSX, compressedAxis, org_apache_arrow_flatbuf_SparseMatrixCompressedAxis, org_apache_arrow_flatbuf_SparseMatrixCompressedAxis_enum_t, INT16_C(0))
/**  The type of values in indptrBuffer */
__flatbuffers_define_table_field(1, org_apache_arrow_flatbuf_SparseMatrixIndexCSX, indptrType, org_apache_arrow_flatbuf_Int_table_t, 1)
/**  indptrBuffer stores the location and size of indptr array that
 *  represents the range of the rows.
 *  The i-th row spans from `indptr[i]` to `indptr[i+1]` in the data.
 *  The length of this array is 1 + (the number of rows), and the type
 *  of index value is long.
 * 
 *  For example, let X be the following 6x4 matrix:
 *  ```text
 *    X := [[0, 1, 2, 0],
 *          [0, 0, 3, 0],
 *          [0, 4, 0, 5],
 *          [0, 0, 0, 0],
 *          [6, 0, 7, 8],
 *          [0, 9, 0, 0]].
 *  ```
 *  The array of non-zero values in X is:
 *  ```text
 *    values(X) = [1, 2, 3, 4, 5, 6, 7, 8, 9].
 *  ```
 *  And the indptr of X is:
 *  ```text
 *    indptr(X) = [0, 2, 3, 5, 5, 8, 10].
 *  ``` */
__flatbuffers_define_struct_field(2, org_apache_arrow_flatbuf_SparseMatrixIndexCSX, indptrBuffer, org_apache_arrow_flatbuf_Buffer_struct_t, 1)
/**  The type of values in indicesBuffer */
__flatbuffers_define_table_field(3, org_apache_arrow_flatbuf_SparseMatrixIndexCSX, indicesType, org_apache_arrow_flatbuf_Int_table_t, 1)
/**  indicesBuffer stores the location and size of the array that
 *  contains the column indices of the corresponding non-zero values.
 *  The type of index value is long.
 * 
 *  For example, the indices of the above X is:
 *  ```text
 *    indices(X) = [1, 2, 2, 1, 3, 0, 2, 3, 1].
 *  ```
 *  Note that the indices are sorted in lexicographical order for each row. */
__flatbuffers_define_struct_field(4, org_apache_arrow_flatbuf_SparseMatrixIndexCSX, indicesBuffer, org_apache_arrow_flatbuf_Buffer_struct_t, 1)

/**  Compressed Sparse Fiber (CSF) sparse tensor index. */
struct org_apache_arrow_flatbuf_SparseTensorIndexCSF_table { uint8_t unused__; };

static inline size_t org_apache_arrow_flatbuf_SparseTensorIndexCSF_vec_len(org_apache_arrow_flatbuf_SparseTensorIndexCSF_vec_t vec)
__flatbuffers_vec_len(vec)
static inline org_apache_arrow_flatbuf_SparseTensorIndexCSF_table_t org_apache_arrow_flatbuf_SparseTensorIndexCSF_vec_at(org_apache_arrow_flatbuf_SparseTensorIndexCSF_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(org_apache_arrow_flatbuf_SparseTensorIndexCSF_table_t, vec, i, 0)
__flatbuffers_table_as_root(org_apache_arrow_flatbuf_SparseTensorIndexCSF)

/**  CSF is a generalization of compressed sparse row (CSR) index.
 *  See [smith2017knl](http://shaden.io/pub-files/smith2017knl.pdf)
 * 
 *  CSF index recursively compresses each dimension of a tensor into a set
 *  of prefix trees. Each path from a root to leaf forms one tensor
 *  non-zero index. CSF is implemented with two arrays of buffers and one
 *  arrays of integers.
 * 
 *  For example, let X be a 2x3x4x5 tensor and let it have the following
 *  8 non-zero values:
 *  ```text
 *    X[0, 0, 0, 1] := 1
 *    X[0, 0, 0, 2] := 2
 *    X[0, 1, 0, 0] := 3
 *    X[0, 1, 0, 2] := 4
 *    X[0, 1, 1, 0] := 5
 *    X[1, 1, 1, 0] := 6
 *    X[1, 1, 1, 1] := 7
 *    X[1, 1, 1, 2] := 8
 *  ```
 *  As a prefix tree this would be represented as:
 *  ```text
 *          0          1
 *         / \         |
 *        0   1        1
 *       /   / \       |
 *      0   0   1      1
 *     /|  /|   |    /| |
 *    1 2 0 2   0   0 1 2
 *  ```
 *  The type of values in indptrBuffers */
__flatbuffers_define_table_field(0, org_apache_arrow_flatbuf_SparseTensorIndexCSF, indptrType, org_apache_arrow_flatbuf_Int_table_t, 1)
/**  indptrBuffers stores the sparsity structure.
 *  Each two consecutive dimensions in a tensor correspond to a buffer in
 *  indptrBuffers. A pair of consecutive values at `indptrBuffers[dim][i]`
 *  and `indptrBuffers[dim][i + 1]` signify a range of nodes in
 *  `indicesBuffers[dim + 1]` who are children of `indicesBuffers[dim][i]` node.
 * 
 *  For example, the indptrBuffers for the above X is:
 *  ```text
 *    indptrBuffer(X) = [
 *                        [0, 2, 3],
 *                        [0, 1, 3, 4],
 *                        [0, 2, 4, 5, 8]
 *                      ].
 *  ``` */
__flatbuffers_define_vector_field(1, org_apache_arrow_flatbuf_SparseTensorIndexCSF, indptrBuffers, org_apache_arrow_flatbuf_Buffer_vec_t, 1)
/**  The type of values in indicesBuffers */
__flatbuffers_define_table_field(2, org_apache_arrow_flatbuf_SparseTensorIndexCSF, indicesType, org_apache_arrow_flatbuf_Int_table_t, 1)
/**  indicesBuffers stores values of nodes.
 *  Each tensor dimension corresponds to a buffer in indicesBuffers.
 *  For example, the indicesBuffers for the above X is:
 *  ```text
 *    indicesBuffer(X) = [
 *                         [0, 1],
 *                         [0, 1, 1],
 *                         [0, 0, 1, 1],
 *                         [1, 2, 0, 2, 0, 0, 1, 2]
 *                       ].
 *  ``` */
__flatbuffers_define_vector_field(3, org_apache_arrow_flatbuf_SparseTensorIndexCSF, indicesBuffers, org_apache_arrow_flatbuf_Buffer_vec_t, 1)
/**  axisOrder stores the sequence in which dimensions were traversed to
 *  produce the prefix tree.
 *  For example, the axisOrder for the above X is:
 *  ```text
 *    axisOrder(X) = [0, 1, 2, 3].
 *  ``` */
__flatbuffers_define_vector_field(4, org_apache_arrow_flatbuf_SparseTensorIndexCSF, axisOrder, flatbuffers_int32_vec_t, 1)
typedef uint8_t org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t;
__flatbuffers_define_integer_type(org_apache_arrow_flatbuf_SparseTensorIndex, org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t, 8)
__flatbuffers_define_union(flatbuffers_, org_apache_arrow_flatbuf_SparseTensorIndex)
#define org_apache_arrow_flatbuf_SparseTensorIndex_NONE ((org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t)UINT8_C(0))
#define org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCOO ((org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t)UINT8_C(1))
#define org_apache_arrow_flatbuf_SparseTensorIndex_SparseMatrixIndexCSX ((org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t)UINT8_C(2))
#define org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCSF ((org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t)UINT8_C(3))

static inline const char *org_apache_arrow_flatbuf_SparseTensorIndex_type_name(org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t type)
{
    switch (type) {
    case org_apache_arrow_flatbuf_SparseTensorIndex_NONE: return "NONE";
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCOO: return "SparseTensorIndexCOO";
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseMatrixIndexCSX: return "SparseMatrixIndexCSX";
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCSF: return "SparseTensorIndexCSF";
    default: return "";
    }
}

static inline int org_apache_arrow_flatbuf_SparseTensorIndex_is_known_type(org_apache_arrow_flatbuf_SparseTensorIndex_union_type_t type)
{
    switch (type) {
    case org_apache_arrow_flatbuf_SparseTensorIndex_NONE: return 1;
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCOO: return 1;
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseMatrixIndexCSX: return 1;
    case org_apache_arrow_flatbuf_SparseTensorIndex_SparseTensorIndexCSF: return 1;
    default: return 0;
    }
}


struct org_apache_arrow_flatbuf_SparseTensor_table { uint8_t unused__; };

static inline size_t org_apache_arrow_flatbuf_SparseTensor_vec_len(org_apache_arrow_flatbuf_SparseTensor_vec_t vec)
__flatbuffers_vec_len(vec)
static inline org_apache_arrow_flatbuf_SparseTensor_table_t org_apache_arrow_flatbuf_SparseTensor_vec_at(org_apache_arrow_flatbuf_SparseTensor_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(org_apache_arrow_flatbuf_SparseTensor_table_t, vec, i, 0)
__flatbuffers_table_as_root(org_apache_arrow_flatbuf_SparseTensor)

/**  The type of data contained in a value cell.
 *  Currently only fixed-width value types are supported,
 *  no strings or nested types. */
__flatbuffers_define_union_field(flatbuffers_, 1, org_apache_arrow_flatbuf_SparseTensor, type, org_apache_arrow_flatbuf_Type, 1)
/**  The dimensions of the tensor, optionally named. */
__flatbuffers_define_vector_field(2, org_apache_arrow_flatbuf_SparseTensor, shape, org_apache_arrow_flatbuf_TensorDim_vec_t, 1)
/**  The number of non-zero values in a sparse tensor. */
__flatbuffers_define_scalar_field(3, org_apache_arrow_flatbuf_SparseTensor, non_zero_length, flatbuffers_int64, int64_t, INT64_C(0))
/**  Sparse tensor index */
__flatbuffers_define_union_field(flatbuffers_, 5, org_apache_arrow_flatbuf_SparseTensor, sparseIndex, org_apache_arrow_flatbuf_SparseTensorIndex, 1)
/**  The location and size of the tensor's data */
__flatbuffers_define_struct_field(6, org_apache_arrow_flatbuf_SparseTensor, data, org_apache_arrow_flatbuf_Buffer_struct_t, 1)


#include "flatcc/flatcc_epilogue.h"
#endif /* SPARSETENSOR_READER_H */

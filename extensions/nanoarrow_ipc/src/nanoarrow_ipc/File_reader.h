#ifndef FILE_READER_H
#define FILE_READER_H

/* Generated by flatcc 0.6.1 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef SCHEMA_READER_H
#include "Schema_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

typedef struct org_apache_arrow_flatbuf_Block org_apache_arrow_flatbuf_Block_t;
typedef const org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block_struct_t;
typedef org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block_mutable_struct_t;
typedef const org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block_vec_t;
typedef org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block_mutable_vec_t;

typedef const struct org_apache_arrow_flatbuf_Footer_table *org_apache_arrow_flatbuf_Footer_table_t;
typedef struct org_apache_arrow_flatbuf_Footer_table *org_apache_arrow_flatbuf_Footer_mutable_table_t;
typedef const flatbuffers_uoffset_t *org_apache_arrow_flatbuf_Footer_vec_t;
typedef flatbuffers_uoffset_t *org_apache_arrow_flatbuf_Footer_mutable_vec_t;
#ifndef org_apache_arrow_flatbuf_Footer_file_identifier
#define org_apache_arrow_flatbuf_Footer_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_Footer_file_identifier */
#ifndef org_apache_arrow_flatbuf_Footer_identifier
#define org_apache_arrow_flatbuf_Footer_identifier 0
#endif
#define org_apache_arrow_flatbuf_Footer_type_hash ((flatbuffers_thash_t)0x65df4be3)
#define org_apache_arrow_flatbuf_Footer_type_identifier "\xe3\x4b\xdf\x65"
#ifndef org_apache_arrow_flatbuf_Footer_file_extension
#define org_apache_arrow_flatbuf_Footer_file_extension "bin"
#endif
#ifndef org_apache_arrow_flatbuf_Block_file_identifier
#define org_apache_arrow_flatbuf_Block_file_identifier 0
#endif
/* deprecated, use org_apache_arrow_flatbuf_Block_file_identifier */
#ifndef org_apache_arrow_flatbuf_Block_identifier
#define org_apache_arrow_flatbuf_Block_identifier 0
#endif
#define org_apache_arrow_flatbuf_Block_type_hash ((flatbuffers_thash_t)0xdc6d4841)
#define org_apache_arrow_flatbuf_Block_type_identifier "\x41\x48\x6d\xdc"
#ifndef org_apache_arrow_flatbuf_Block_file_extension
#define org_apache_arrow_flatbuf_Block_file_extension "bin"
#endif


struct org_apache_arrow_flatbuf_Block {
    /**  Index to the start of the RecordBlock (note this is past the Message header) */
    alignas(8) int64_t offset;
    /**  Length of the metadata */
    alignas(4) int32_t metaDataLength;
    /**  Length of the data (this is aligned so there can be a gap between this and
     *  the metadata). */
    alignas(8) int64_t bodyLength;
};
static_assert(sizeof(org_apache_arrow_flatbuf_Block_t) == 24, "struct size mismatch");

static inline const org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block__const_ptr_add(const org_apache_arrow_flatbuf_Block_t *p, size_t i) { return p + i; }
static inline org_apache_arrow_flatbuf_Block_t *org_apache_arrow_flatbuf_Block__ptr_add(org_apache_arrow_flatbuf_Block_t *p, size_t i) { return p + i; }
static inline org_apache_arrow_flatbuf_Block_struct_t org_apache_arrow_flatbuf_Block_vec_at(org_apache_arrow_flatbuf_Block_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t org_apache_arrow_flatbuf_Block__size(void) { return 24; }
static inline size_t org_apache_arrow_flatbuf_Block_vec_len(org_apache_arrow_flatbuf_Block_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(org_apache_arrow_flatbuf_Block)

__flatbuffers_define_struct_scalar_field(org_apache_arrow_flatbuf_Block, offset, flatbuffers_int64, int64_t)
__flatbuffers_define_struct_scalar_field(org_apache_arrow_flatbuf_Block, metaDataLength, flatbuffers_int32, int32_t)
__flatbuffers_define_struct_scalar_field(org_apache_arrow_flatbuf_Block, bodyLength, flatbuffers_int64, int64_t)


/**  ----------------------------------------------------------------------
 *  Arrow File metadata
 *  */
struct org_apache_arrow_flatbuf_Footer_table { uint8_t unused__; };

static inline size_t org_apache_arrow_flatbuf_Footer_vec_len(org_apache_arrow_flatbuf_Footer_vec_t vec)
__flatbuffers_vec_len(vec)
static inline org_apache_arrow_flatbuf_Footer_table_t org_apache_arrow_flatbuf_Footer_vec_at(org_apache_arrow_flatbuf_Footer_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(org_apache_arrow_flatbuf_Footer_table_t, vec, i, 0)
__flatbuffers_table_as_root(org_apache_arrow_flatbuf_Footer)

__flatbuffers_define_scalar_field(0, org_apache_arrow_flatbuf_Footer, version, org_apache_arrow_flatbuf_MetadataVersion, org_apache_arrow_flatbuf_MetadataVersion_enum_t, INT16_C(0))
__flatbuffers_define_table_field(1, org_apache_arrow_flatbuf_Footer, schema, org_apache_arrow_flatbuf_Schema_table_t, 0)
__flatbuffers_define_vector_field(2, org_apache_arrow_flatbuf_Footer, dictionaries, org_apache_arrow_flatbuf_Block_vec_t, 0)
__flatbuffers_define_vector_field(3, org_apache_arrow_flatbuf_Footer, recordBatches, org_apache_arrow_flatbuf_Block_vec_t, 0)
/**  User-defined metadata */
__flatbuffers_define_vector_field(4, org_apache_arrow_flatbuf_Footer, custom_metadata, org_apache_arrow_flatbuf_KeyValue_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* FILE_READER_H */
